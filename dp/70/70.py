'''
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。
1 dp数组以及下标的含义
dp[i] 第i项是爬i阶台阶的所有方法
2 递推公式
爬上 n-1n−1 阶楼梯的方法数量。因为再爬1阶就能到第n阶
爬上 n-2n−2 阶楼梯的方法数量，因为再爬2阶就能到第n阶
F(n) = F(n - 1) + F(n - 2)
f[3] = 3   f[4] = 5
3 dp数组初始化
F(0) = 1[0阶本来是不存在的，为了计算2阶，初始化为1]，F(1) = 1
4 遍历顺序
从前往后
5 打印dp数组

a = b = 1
for i in range(2, n + 1):
    a, b = b, a + b
return b
'''

class Solution:
    def climbStairs(self, n):
        dp = [0] * (n + 1)
        dp[0],dp[1] = 1, 1
        for i in range(2, n + 1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[-1]

